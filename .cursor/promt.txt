Техническое задание на разработку Telegram-бота для планирования игровых встреч
1. Общее описание
Бот предназначен для чата с друзьями, которые играют в настольные игры. Основные функции:

Работа с коллекциями игр с сайта tesera.ru через API.

Планирование встреч и уведомления участников.

Поиск игр среди коллекций участников.

2. Функциональные требования
2.1. Работа с коллекциями игр
2.1.1. Добавление коллекции по нику Tesera
Пользователь отправляет команду /addcollection <ник_на_tesera>.

Бот получает список игр пользователя через API Tesera (https://api.tesera.ru/users/<ник>/games) и сохраняет в БД.

Если коллекция успешно добавлена, бот отправляет подтверждение.

2.1.2. Просмотр коллекций участников
Пользователь отправляет команду /collections.

Бот выводит список всех участников и количество игр у каждого.

По команде /collections @ник бот показывает список игр конкретного пользователя.

2.1.3. Поиск игры среди участников
Пользователь отправляет /findgame <название_игры>.

Бот ищет игру в коллекциях всех пользователей и выводит список, у кого она есть.

Если игра не найдена, бот предлагает проверить название.

2.2. Планирование встреч
2.2.1. Создание встречи
Пользователь отправляет /createmeeting <дата_время> <макс_участников> <описание>.

Бот создает событие и сохраняет в БД.

Отправляет уведомление в чат с кнопкой "Записаться".

2.2.2. Запись на встречу
Участники нажимают кнопку "Записаться" под сообщением о встрече.

Бот проверяет наличие свободных мест и добавляет пользователя в список.

Если мест нет, уведомляет об этом.

2.2.3. Уведомление создателю встречи
Когда кто-то записывается, бот отправляет создателю уведомление:
"@username записался на вашу встречу <дата>. Текущее количество участников: X/X."

2.3. Подписка на игры и расписание
2.3.1. Подписка на игру
Пользователь отправляет /subscribe <название_игры>.

Бот уведомляет его, когда создается встреча с этой игрой.

2.3.2. Подписка на дни
Пользователь отправляет /subscribeday <день_недели>.

Бот присылает уведомления о встречах в выбранный день.

3. Технические требования
3.1. Стек технологий
Backend: Java 17+, Spring Boot 3.x

База данных: H2 (встроенная, с возможностью миграции на PostgreSQL)

Telegram Bot API: telegrambots-spring-boot-starter

HTTP-клиент: WebClient / RestTemplate для запросов к Tesera API

Логирование: SLF4J + Logback

3.2. API Tesera
Используемые эндпоинты:

GET https://api.tesera.ru/users/<ник>/games – коллекция игр пользователя.

GET https://api.tesera.ru/games/search?query=<название> – поиск игры.

3.3. База данных
Таблицы:

Users (id, telegram_id, username, tesera_nickname)

Games (id, tesera_id, title)

UserGames (user_id, game_id) – связь пользователей и игр

Meetings (id, creator_id, datetime, max_participants, description)

MeetingParticipants (meeting_id, user_id) – запись на встречи

Subscriptions (user_id, game_id/day) – подписки

3.4. Обработка ошибок
Некорректные команды → подсказка.

Ошибки API Tesera → уведомление пользователя.

Попытка добавить уже существующую коллекцию → сообщение об этом.

4. Этапы разработки
Настройка Spring Boot + Telegram Bot.

Реализация работы с Tesera API (получение коллекций).

Система хранения данных (H2 + JPA/Hibernate).

Команды для работы с коллекциями.

Система встреч (создание, запись, уведомления).

Подписки на игры и дни.

Тестирование и доработка.

5. Дополнительно
Можно добавить кэширование запросов к Tesera (например, через Spring Cache).

Логирование действий бота для отладки.

Возможность экспорта встреч в Google Calendar.